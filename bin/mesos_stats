#!/usr/bin/env python -u
import os
import sys
import time
from datetime import datetime
import traceback
from mesos_stats.util import log, timer
from mesos_stats.mesos import Mesos, MesosStatsException, slave_metrics, slave_task_metrics, cluster_metrics
from mesos_stats.carbon import Carbon
from mesos_stats.singularity import Singularity, singularity_metrics



# if len(sys.argv) < 4:
#     log("Usage: %s <mesos master host> <carbon host> <graphite prefix> [singularity_host]" % sys.argv[0])
#     sys.exit(1)

master_host = os.environ['MESOS_MASTER']
carbon_host = os.environ['CARBON_HOST']
graphite_prefix = os.environ['GRAPHITE_PREFIX']

try:
    singularity_host = os.environ['SINGULARITY_HOST']
except:
    singularity_host = None

period = 60

master_pid = master_host + ":5050"
# mesos is persistent, it keeps track of moving leaders
mesos = Mesos(master_pid)
# cabon is persistent, it manages connections and serialisation
carbon = Carbon(carbon_host, graphite_prefix)
singularity = None

if singularity_host != None:
    singularity = Singularity(singularity_host)

print "Got configuration..."
print "MESOS MASTER:     %s" % master_pid
print "CARBON:           %s" % carbon_host
print "GRAPHITE PREFIX:  %s" % graphite_prefix
print "SINGULARITY HOST: %s" % singularity_host
print "=========================================="
start_time = time.time()
print "Start time: %s" % datetime.fromtimestamp(start_time)

def wait_until_beginning_of_clock_minute():
    iter_start = time.time()
    now = datetime.fromtimestamp(iter_start)
    sleep_time = 60.0 - ((now.microsecond/1000000.0) + now.second)
    log("Sleeping for %ss" % sleep_time)
    time.sleep(sleep_time)

def main_loop():
    should_exit = False
    # self-monitoring
    last_cycle_time = 0
    last_collection_time = 0
    last_send_time = 0
    while True:
        try:
            wait_until_beginning_of_clock_minute()
            with timer("Entire collect and send cycle"):
                timestamp = time.time()
                now = datetime.fromtimestamp(timestamp)
                log("Timestamp: %s (%s)" % (now, timestamp))
                cycle_timeout = timestamp + 59.0
                metrics = []
                if mesos != None:
                    with timer("Mesos metrics collection"):
                        mesos.reset()
                        metrics += slave_metrics(mesos)
                        metrics += slave_task_metrics(mesos)
                        metrics += cluster_metrics(mesos)
                if singularity != None:
                    with timer("Singularity metrics collection"):
                        singularity.reset()
                        metrics += singularity_metrics(singularity)
                if len(metrics) == 0:
                    log("No stats this time; sleeping")
                else:
                    send_timeout = cycle_timeout - time.time()
                    log("Sending stats (timeout %ss)" % send_timeout)
                    with timer("Sending stats to graphite"):
                        carbon.send_metrics(metrics, send_timeout, timestamp)
        except MesosStatsException as e:
            log("%s" % e)
        except KeyboardInterrupt, SystemExit:
            print "Bye!"
            should_exit = True
            sys.exit(0)
            break
        except Exception as e:
            traceback.print_exc()
            log("Unhandled exception: %s" % e)
        except object as o:
            traceback.print_exc()
            log("Unhandled exception object: %s" % o)
        except:
            traceback.print_exc()
            log("Unhandled unknown exception.")
        else:
            log("Metrics sent successfully.")
        finally:
            if should_exit:
                return

try:
    main_loop()
except KeyboardInterrupt, SystemExit:
    print "Bye!"
    sys.exit(0)
