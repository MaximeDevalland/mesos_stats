#!/usr/bin/env python
import sys
import time
from mesos_stats import log
from mesos_stats.mesos import Mesos, slave_metrics, slave_task_metrics, cluster_metrics
from mesos_stats.carbon import Carbon

if len(sys.argv) < 4:
    log("Usage: %s <mesos master host> <carbon host> <graphite prefix> [period seconds=60]" % sys.argv[0])
    sys.exit(1)

master_host = sys.argv[1]
carbon_host = sys.argv[2]
graphite_prefix = sys.argv[3]
try:
    period = float(sys.argv[4])
except:
    period = 60

master_pid = master_host + ":5050"
# mesos is persistent, it keeps track of moving leaders
mesos = Mesos(master_pid)
# cabon is persistent, it manages connections and serialisation
carbon = Carbon(carbon_host, graphite_prefix)

try:
    while True:
        next_run = time.time() + period
        mesos.reset()
        slave = slave_metrics(mesos)
        slave_tasks = slave_task_metrics(mesos)
        cluster = cluster_metrics(mesos)
        metrics = slave + slave_tasks + cluster
        if len(metrics) == 0:
            log("No stats this time; sleeping")
        else:
            carbon.send_metrics(metrics)
            log("Metrics sent.")
        sleep = next_run - time.time()
        if sleep < 0:
            log("ERROR: Metrics collection took longer than %ds" % period)
            sleep = period + sleep
        log("Sleeping for %ds" % sleep)
        time.sleep(sleep)
except KeyboardInterrupt, SystemExit:
    print "Bye!"

