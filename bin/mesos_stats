#!/usr/bin/env python -u
import sys
import time
from datetime import datetime
import traceback
from mesos_stats.util import log
from mesos_stats.mesos import Mesos, slave_metrics, slave_task_metrics, cluster_metrics
from mesos_stats.carbon import Carbon
from mesos_stats.singularity import Singularity, singularity_metrics

if len(sys.argv) < 4:
    log("Usage: %s <mesos master host> <carbon host> <graphite prefix> [singularity_host]" % sys.argv[0])
    sys.exit(1)

master_host = sys.argv[1]
carbon_host = sys.argv[2]
graphite_prefix = sys.argv[3]
try:
    singularity_host = sys.argv[4]
except:
    singularity_host = None

period = 60

master_pid = master_host + ":5050"
# mesos is persistent, it keeps track of moving leaders
mesos = Mesos(master_pid)
# cabon is persistent, it manages connections and serialisation
carbon = Carbon(carbon_host, graphite_prefix)
singularity = None

if singularity_host != None:
    singularity = Singularity(singularity_host)

print "Got configuration..."
print "MESOS MASTER:     %s" % master_pid
print "CARBON:           %s" % carbon_host
print "GRAPHITE PREFIX:  %s" % graphite_prefix
print "SINGULARITY HOST: %s" % singularity_host
print "=========================================="

def main_loop():
    should_exit = False
    next_run = time.time() + 120
    while True:
        try:
            if next_run < time.time():
                log("ERROR: collection and sending took more than 1 minute, one datapoint skipped")
            timestamp = time.time()
            now = datetime.fromtimestamp(timestamp)
            sleep_time = 60.0 - ((now.microsecond/1000000.0) + now.second)
            log("Sleeping for %ss" % sleep_time)
            time.sleep(sleep_time)
            log("Timestamp: %s (%s)" % (datetime.now(), time.time()))
            next_run = time.time() + 60
            mesos.reset()
            slave = slave_metrics(mesos)
            slave_tasks = slave_task_metrics(mesos)
            cluster = cluster_metrics(mesos)
            metrics = slave + slave_tasks + cluster
            if singularity != None:
                singularity.reset()
                metrics += singularity_metrics(singularity)
            if len(metrics) == 0:
                log("No stats this time; sleeping")
            else:
                send_timeout = next_run - time.time() - 1
                log("Sending stats (timeout %ss)" % send_timeout)
                carbon.send_metrics(metrics, send_timeout, timestamp)
        except KeyboardInterrupt, SystemExit:
            print "Bye!"
            should_exit = True
            sys.exit(0)
            break
        except Exception as e:
            traceback.print_exc()
            log("Unhandled exception: %s" % e)
        except object as o:
            traceback.print_exc()
            log("Unhandled exception object: %s" % o)
        except:
            traceback.print_exc()
            log("Unhandled unknown exception.")
        else:
            log("Metrics sent successfully.")
        finally:
            if should_exit:
                return

try:
    main_loop()
except KeyboardInterrupt, SystemExit:
    print "Bye!"
    sys.exit(0)

