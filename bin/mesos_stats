#!/usr/bin/env python -u
import sys
import time
import traceback
from mesos_stats.util import log
from mesos_stats.mesos import Mesos, slave_metrics, slave_task_metrics, cluster_metrics
from mesos_stats.carbon import Carbon

if len(sys.argv) < 4:
    log("Usage: %s <mesos master host> <carbon host> <graphite prefix> [period seconds=60]" % sys.argv[0])
    sys.exit(1)

master_host = sys.argv[1]
carbon_host = sys.argv[2]
graphite_prefix = sys.argv[3]
try:
    period = float(sys.argv[4])
except:
    period = 60

master_pid = master_host + ":5050"
# mesos is persistent, it keeps track of moving leaders
mesos = Mesos(master_pid)
# cabon is persistent, it manages connections and serialisation
carbon = Carbon(carbon_host, graphite_prefix)

print "Got configuration..."
print "MESOS MASTER:    %s" % master_pid
print "CARBON:          %s" % carbon_host
print "GRAPHITE PREFIX: %s" % graphite_prefix
print "=========================================="

def main_loop():
    should_exit = False
    while True:
        try:
            next_run = time.time() + period
            mesos.reset()
            slave = slave_metrics(mesos)
            slave_tasks = slave_task_metrics(mesos)
            cluster = cluster_metrics(mesos)
            metrics = slave + slave_tasks + cluster
            if len(metrics) == 0:
                log("No stats this time; sleeping")
            else:
                send_timeout = next_run - time.time() - 1
                log("Sending stats (timeout %ss)" % send_timeout)
                carbon.send_metrics(metrics, send_timeout)
        except KeyboardInterrupt, SystemExit:
            print "Bye!"
            should_exit = True
            sys.exit(0)
            break
        except Exception as e:
            traceback.print_exc()
            log("Unhandled exception: %s" % e)
        except object as o:
            traceback.print_exc()
            log("Unhandled exception object: %s" % o)
        except:
            traceback.print_exc()
            log("Unhandled unknown exception.")
        else:
            log("Metrics sent successfully.")
        finally:
            if should_exit:
                return
            sleep = next_run - time.time()
            if sleep < 0:
                log("ERROR: Metrics collection took longer than %ds" % period)
                sleep = period + sleep
            log("Sleeping for %ds" % sleep)
            time.sleep(sleep)

try:
    main_loop()
except KeyboardInterrupt, SystemExit:
    print "Bye!"
    sys.exit(0)

